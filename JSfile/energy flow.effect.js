// energy flow.effect.js

export const energy flowEffect = {
  id: "energy flow",
  name: "Energy flow",
  
  description: `## ‚ö° EFFET 18 : ENERGY FLOW

**CAT√âGORIE :** TEXT  
**EFFET DEMAND√â :** Energy_Flow  
**ID UNIQUE :** plasma-energy-stream-018  
**NOM AFFICHAGE :** Flux √ânerg√©tique Plasma  

**DESCRIPTION :** Courants d'√©nergie plasma traversent continuellement le texte. Flux lumineux avec particules charg√©es, arcs √©lectriques secondaires, gradients de couleur selon l'intensit√© √©nerg√©tique. √ânergie qui pulse et reflue comme un syst√®me circulatoire lumineux.

**SP√âCIFICATIONS ADDICTION :**
- Flux √©nerg√©tiques avec variations d'intensit√© rythm√©es
- Arcs √©lectriques secondaires impr√©visibles
- Syst√®me circulatoire d'√©nergie complexe
- Couleurs qui √©voluent selon la charge √©nerg√©tique

-------------------------------------------------------------------

üî• ENERGY FLOW EFFECT CR√â√â ! ‚ö°
‚ú® CARACT√âRISTIQUES HYPNOTIQUES INT√âGR√âES :
üåä Syst√®me Circulatoire √ânerg√©tique :

N≈ìuds √©nerg√©tiques interconnect√©s avec charges dynamiques
Flux plasma suivant des chemins organiques courbes
Syst√®me de circulation complexe avec connexions multiples
Pulsations rythm√©es synchronis√©es mais avec variations

‚ö° Effets √âlectriques Addictifs :

Arcs √©lectriques spontan√©s entre n≈ìuds charg√©s (30% impr√©visibilit√©)
Particules charg√©es avec attraction/r√©pulsion physique r√©aliste
D√©charges surprises quand la charge d√©passe le seuil critique
Turbulence √©lectrique avec segments d'arcs r√©g√©n√©ratifs

üé® √âvolution Chromatique √ânerg√©tique :

Palette progressive : Bleu froid ‚Üí Cyan ‚Üí Jaune ‚Üí Magenta √©lectrique
Couleurs selon intensit√© : L'√©nergie transforme la couleur dynamiquement
Glow pulsant avec radius variant selon la charge
Mode screen pour fusion lumineuse addictive

üîÑ Micro-D√©tails R√©compensants :

Trails de particules avec d√©grad√© progressif
Scintillement d'arcs avec r√©g√©n√©ration al√©atoire des segments
Flux en boucle parfaite sur chemins courbes
Variations de largeur selon l'intensit√© √©nerg√©tique

üéõÔ∏è PARAM√àTRES CONFIGURABLES :

Vitesse : Contr√¥le flux et pulsations (0.1-3)
Intensit√© : Luminosit√© et opacit√© globale (0-1)
Densit√© : Nombre de n≈ìuds et fr√©quence particules (0.3-2)
Turbulence : Chaos dans les arcs √©lectriques (0-1)

L'effet simule un v√©ritable syst√®me √©nerg√©tique plasma avec physique r√©aliste, cr√©ant une fascination par l'impr√©visibilit√© contr√¥l√©e des d√©charges √©lectriques et l'√©volution hypnotique des couleurs selon l'intensit√© !`,

  category: "text",
  subcategory: "animation",
  intensity: "medium",
  performance: "light",

  compatibility: {
    text: true,
    image: false,
    logo: true,
    background: false
  },

  tags: ["text", "texte", "glow", "energy", "plasma", "pulse"],

  parameters: {
    // Param√®tres par d√©faut - √† personnaliser selon l'effet
    vitesse: {
      type: "range",
      min: 0.1,
      max: 3,
      default: 1,
      description: "Vitesse d'animation"
    },
    intensite: {
      type: "range",
      min: 0,
      max: 1,
      default: 0.8,
      description: "Intensit√© de l'effet"
    }
  },

  preview: {
    gif: "energy flow.gif",
    duration: 3000,
    loop: true
  },

  engine: (element, params) => {
    
    // Code original de l'effet int√©gr√©
    constructor(config = {}) {
        super({
            id: 'plasma-energy-stream-018',
            name: 'Flux √ânerg√©tique Plasma',
            category: 'text',
            version: '1.0',
            performance: 'medium',
            parameters: {
                vitesse: { type: 'range', min: 0.1, max: 3, default: 1.2 },
                intensite: { type: 'range', min: 0, max: 1, default: 0.7 },
                couleur: { type: 'color', default: '#00ffff' },
                densite: { type: 'range', min: 0.3, max: 2, default: 1 },
                turbulence: { type: 'range', min: 0, max: 1, default: 0.4 }
            }
        });

        // Variables syst√®me √©nerg√©tique
        this.temps = 0;
        this.energyNodes = [];
        this.energyStreams = [];
        this.electricArcs = [];
        this.chargedParticles = [];
        this.pulsePhases = [];
        
        // Pool d'objets pour optimisation
        this.particlePool = [];
        this.arcPool = [];
        
        // Donn√©es de flux √©nerg√©tique
        this.flowPaths = [];
        this.energyLevel = 0;
        this.lastPulse = 0;
        this.circuitComplexity = 8;
        
        // Syst√®me de couleurs √©nerg√©tiques
        this.energyColors = {
            low: [0, 100, 255],     // Bleu froid
            medium: [0, 255, 150],  // Cyan
            high: [255, 255, 0],    // Jaune chaud
            peak: [255, 100, 255]   // Magenta √©lectrique
        };
    }

    initialize(canvas, element) {
        this.canvas = canvas;
        this.element = element;
        
        // Cr√©ation du syst√®me circulatoire √©nerg√©tique
        this.createEnergyNetwork();
        this.initializeParticlePools();
        this.setupFlowPaths();
    }

    createEnergyNetwork() {
        const { width, height } = this.element;
        this.energyNodes = [];
        
        // Cr√©ation des n≈ìuds √©nerg√©tiques principaux
        const nodeCount = Math.floor(this.circuitComplexity * this.parameters.densite.value);
        
        for (let i = 0; i < nodeCount; i++) {
            this.energyNodes.push({
                x: Math.random() * width,
                y: Math.random() * height,
                charge: Math.random() * 2 - 1,
                radius: 2 + Math.random() * 4,
                connections: [],
                pulsePhase: Math.random() * Math.PI * 2,
                lastDischarge: 0
            });
        }
        
        // Connexions entre n≈ìuds (syst√®me circulatoire)
        this.energyNodes.forEach((node, i) => {
            const connectionCount = 2 + Math.floor(Math.random() * 3);
            for (let j = 0; j < connectionCount; j++) {
                const targetIndex = Math.floor(Math.random() * this.energyNodes.length);
                if (targetIndex !== i && !node.connections.includes(targetIndex)) {
                    node.connections.push(targetIndex);
                }
            }
        });
    }

    initializeParticlePools() {
        // Pool de particules charg√©es
        for (let i = 0; i < 100; i++) {
            this.particlePool.push({
                x: 0, y: 0,
                vx: 0, vy: 0,
                life: 0, maxLife: 1,
                charge: 0, size: 1,
                active: false,
                trail: []
            });
        }
        
        // Pool d'arcs √©lectriques
        for (let i = 0; i < 50; i++) {
            this.arcPool.push({
                startX: 0, startY: 0,
                endX: 0, endY: 0,
                intensity: 0,
                duration: 0,
                segments: [],
                active: false
            });
        }
    }

    setupFlowPaths() {
        this.flowPaths = [];
        const { width, height } = this.element;
        
        // Cr√©ation de chemins de flux √©nerg√©tique complexes
        for (let i = 0; i < 6; i++) {
            const path = {
                points: [],
                flow: Math.random() * 0.02 + 0.01,
                width: 1 + Math.random() * 3,
                energy: Math.random()
            };
            
            // G√©n√©ration de courbes organiques
            const segments = 8 + Math.floor(Math.random() * 6);
            for (let j = 0; j <= segments; j++) {
                const t = j / segments;
                const baseX = t * width;
                const baseY = height * 0.5 + Math.sin(t * Math.PI * 3 + i) * height * 0.3;
                
                path.points.push({
                    x: baseX + (Math.random() - 0.5) * 20,
                    y: baseY + (Math.random() - 0.5) * 20,
                    energy: Math.random()
                });
            }
            
            this.flowPaths.push(path);
        }
    }

    getEnergyColor(energy) {
        const { energyColors } = this;
        let color1, color2, t;
        
        if (energy < 0.33) {
            color1 = energyColors.low;
            color2 = energyColors.medium;
            t = energy / 0.33;
        } else if (energy < 0.66) {
            color1 = energyColors.medium;
            color2 = energyColors.high;
            t = (energy - 0.33) / 0.33;
        } else {
            color1 = energyColors.high;
            color2 = energyColors.peak;
            t = (energy - 0.66) / 0.34;
        }
        
        return [
            Math.floor(color1[0] + (color2[0] - color1[0]) * t),
            Math.floor(color1[1] + (color2[1] - color1[1]) * t),
            Math.floor(color1[2] + (color2[2] - color1[2]) * t)
        ];
    }

    spawnChargedParticle() {
        const particle = this.particlePool.find(p => !p.active);
        if (!particle) return;
        
        const node = this.energyNodes[Math.floor(Math.random() * this.energyNodes.length)];
        
        particle.active = true;
        particle.x = node.x;
        particle.y = node.y;
        particle.vx = (Math.random() - 0.5) * 4;
        particle.vy = (Math.random() - 0.5) * 4;
        particle.life = 1;
        particle.maxLife = 0.5 + Math.random() * 1;
        particle.charge = Math.random() > 0.5 ? 1 : -1;
        particle.size = 1 + Math.random() * 2;
        particle.trail = [];
    }

    createElectricArc(startNode, endNode) {
        const arc = this.arcPool.find(a => !a.active);
        if (!arc) return;
        
        arc.active = true;
        arc.startX = startNode.x;
        arc.startY = startNode.y;
        arc.endX = endNode.x;
        arc.endY = endNode.y;
        arc.intensity = 0.5 + Math.random() * 0.5;
        arc.duration = 0.1 + Math.random() * 0.2;
        arc.segments = [];
        
        // G√©n√©ration de segments d'arc avec turbulence
        const segmentCount = 5 + Math.floor(Math.random() * 8);
        for (let i = 0; i <= segmentCount; i++) {
            const t = i / segmentCount;
            const baseX = arc.startX + (arc.endX - arc.startX) * t;
            const baseY = arc.startY + (arc.endY - arc.startY) * t;
            
            const turbulence = this.parameters.turbulence.value * 20;
            arc.segments.push({
                x: baseX + (Math.random() - 0.5) * turbulence,
                y: baseY + (Math.random() - 0.5) * turbulence
            });
        }
    }

    updateEnergySystem(deltaTime) {
        const dt = deltaTime * 0.001;
        this.energyLevel = 0.5 + Math.sin(this.temps * 2) * 0.3 + 
                          Math.sin(this.temps * 5.7) * 0.1 + 
                          Math.sin(this.temps * 11.3) * 0.05;
        
        // Mise √† jour des n≈ìuds √©nerg√©tiques
        this.energyNodes.forEach((node, i) => {
            node.pulsePhase += dt * Math.PI * this.parameters.vitesse.value;
            node.charge = Math.sin(node.pulsePhase) * this.energyLevel;
            
            // D√©charge spontan√©e (arcs √©lectriques)
            if (Math.abs(node.charge) > 0.8 && this.temps - node.lastDischarge > 0.5) {
                if (Math.random() < 0.3) {
                    const connections = node.connections;
                    if (connections.length > 0) {
                        const targetIndex = connections[Math.floor(Math.random() * connections.length)];
                        this.createElectricArc(node, this.energyNodes[targetIndex]);
                        node.lastDischarge = this.temps;
                    }
                }
            }
        });
        
        // G√©n√©ration de particules charg√©es
        if (Math.random() < this.parameters.densite.value * 0.1) {
            this.spawnChargedParticle();
        }
    }

    updateParticles(deltaTime) {
        const dt = deltaTime * 0.001;
        
        this.chargedParticles = this.particlePool.filter(p => p.active);
        
        this.chargedParticles.forEach(particle => {
            particle.life -= dt / particle.maxLife;
            
            if (particle.life <= 0) {
                particle.active = false;
                return;
            }
            
            // Attraction vers n≈ìuds √©nerg√©tiques
            let fx = 0, fy = 0;
            this.energyNodes.forEach(node => {
                const dx = node.x - particle.x;
                const dy = node.y - particle.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance > 0) {
                    const force = (node.charge * particle.charge) / (distance * distance) * 100;
                    fx += (dx / distance) * force;
                    fy += (dy / distance) * force;
                }
            });
            
            particle.vx += fx * dt;
            particle.vy += fy * dt;
            particle.vx *= 0.98; // Friction
            particle.vy *= 0.98;
            
            // Mise √† jour position
            particle.x += particle.vx * dt * 60;
            particle.y += particle.vy * dt * 60;
            
            // Trail
            particle.trail.push({ x: particle.x, y: particle.y, life: particle.life });
            if (particle.trail.length > 8) {
                particle.trail.shift();
            }
        });
    }

    updateElectricArcs(deltaTime) {
        const dt = deltaTime * 0.001;
        
        this.electricArcs = this.arcPool.filter(a => a.active);
        
        this.electricArcs.forEach(arc => {
            arc.duration -= dt;
            
            if (arc.duration <= 0) {
                arc.active = false;
                return;
            }
            
            // R√©g√©n√©ration p√©riodique des segments pour effet scintillant
            if (Math.random() < 0.3) {
                const segmentIndex = Math.floor(Math.random() * arc.segments.length);
                const segment = arc.segments[segmentIndex];
                const turbulence = this.parameters.turbulence.value * 15;
                
                segment.x += (Math.random() - 0.5) * turbulence;
                segment.y += (Math.random() - 0.5) * turbulence;
            }
        });
    }

    renderFlowPaths(ctx) {
        this.flowPaths.forEach(path => {
            const flowOffset = this.temps * path.flow * this.parameters.vitesse.value;
            const currentEnergy = path.energy * this.energyLevel;
            const [r, g, b] = this.getEnergyColor(currentEnergy);
            
            // Rendu du flux principal
            ctx.strokeStyle = `rgba(${r}, ${g}, ${b}, ${0.6 * this.parameters.intensite.value})`;
            ctx.lineWidth = path.width * (1 + currentEnergy * 0.5);
            ctx.lineCap = 'round';
            
            ctx.beginPath();
            path.points.forEach((point, i) => {
                if (i === 0) {
                    ctx.moveTo(point.x, point.y);
                } else {
                    const prevPoint = path.points[i - 1];
                    const cpx = (prevPoint.x + point.x) / 2;
                    const cpy = (prevPoint.y + point.y) / 2;
                    ctx.quadraticCurveTo(prevPoint.x, prevPoint.y, cpx, cpy);
                }
            });
            ctx.stroke();
            
            // Particules de flux
            for (let i = 0; i < path.points.length - 1; i++) {
                const t = (flowOffset + i / path.points.length) % 1;
                const point1 = path.points[i];
                const point2 = path.points[i + 1];
                
                const x = point1.x + (point2.x - point1.x) * t;
                const y = point1.y + (point2.y - point1.y) * t;
                
                const particleEnergy = point1.energy * this.energyLevel;
                const [pr, pg, pb] = this.getEnergyColor(particleEnergy);
                
                ctx.fillStyle = `rgba(${pr}, ${pg}, ${pb}, ${0.8 * this.parameters.intensite.value})`;
                ctx.beginPath();
                ctx.arc(x, y, 1 + particleEnergy * 2, 0, Math.PI * 2);
                ctx.fill();
                
                // Glow effect
                ctx.shadowColor = `rgb(${pr}, ${pg}, ${pb})`;
                ctx.shadowBlur = 4 + particleEnergy * 6;
                ctx.fill();
                ctx.shadowBlur = 0;
            }
        });
    }

    renderEnergyNodes(ctx) {
        this.energyNodes.forEach(node => {
            const energy = Math.abs(node.charge);
            const [r, g, b] = this.getEnergyColor(energy);
            
            // N≈ìud principal
            ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${0.8 * this.parameters.intensite.value})`;
            ctx.beginPath();
            ctx.arc(node.x, node.y, node.radius * (1 + energy * 0.5), 0, Math.PI * 2);
            ctx.fill();
            
            // Glow pulsant
            const glowRadius = node.radius * (2 + energy * 3);
            const gradient = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, glowRadius);
            gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, ${0.4 * energy * this.parameters.intensite.value})`);
            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(node.x, node.y, glowRadius, 0, Math.PI * 2);
            ctx.fill();
        });
    }

    renderElectricArcs(ctx) {
        this.electricArcs.forEach(arc => {
            const intensity = arc.intensity * (arc.duration / 0.3);
            const [r, g, b] = this.getEnergyColor(intensity);
            
            // Arc principal
            ctx.strokeStyle = `rgba(${r}, ${g}, ${b}, ${intensity * this.parameters.intensite.value})`;
            ctx.lineWidth = 1 + intensity * 2;
            ctx.lineCap = 'round';
            
            ctx.beginPath();
            arc.segments.forEach((segment, i) => {
                if (i === 0) {
                    ctx.moveTo(segment.x, segment.y);
                } else {
                    ctx.lineTo(segment.x, segment.y);
                }
            });
            ctx.stroke();
            
            // Glow de l'arc
            ctx.shadowColor = `rgb(${r}, ${g}, ${b})`;
            ctx.shadowBlur = 8 * intensity;
            ctx.stroke();
            ctx.shadowBlur = 0;
        });
    }

    renderChargedParticles(ctx) {
        this.chargedParticles.forEach(particle => {
            const energy = particle.life;
            const [r, g, b] = this.getEnergyColor(energy);
            
            // Trail
            particle.trail.forEach((point, i) => {
                const alpha = (point.life * i / particle.trail.length) * this.parameters.intensite.value;
                ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${alpha})`;
                ctx.beginPath();
                ctx.arc(point.x, point.y, particle.size * (i / particle.trail.length), 0, Math.PI * 2);
                ctx.fill();
            });
            
            // Particule principale
            ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${energy * this.parameters.intensite.value})`;
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            ctx.fill();
            
            // Glow
            ctx.shadowColor = `rgb(${r}, ${g}, ${b})`;
            ctx.shadowBlur = 6;
            ctx.fill();
            ctx.shadowBlur = 0;
        });
    }

    render(ctx, element, deltaTime) {
        ctx.save();
        ctx.translate(element.x, element.y);
        ctx.rotate(element.rotation);
        ctx.globalAlpha = element.opacity;
        
        // Mode de composition pour effet √©nerg√©tique
        ctx.globalCompositeOperation = 'screen';
        
        // Rendu des composants √©nerg√©tiques
        this.renderFlowPaths(ctx);
        this.renderEnergyNodes(ctx);
        this.renderElectricArcs(ctx);
        this.renderChargedParticles(ctx);
        
        ctx.restore();
    }

    update(deltaTime) {
        this.temps += deltaTime * 0.001 * this.parameters.vitesse.value;
        
        this.updateEnergySystem(deltaTime);
        this.updateParticles(deltaTime);
        this.updateElectricArcs(deltaTime);
    }

    destroy() {
        this.energyNodes = [];
        this.energyStreams = [];
        this.electricArcs = [];
        this.chargedParticles = [];
        this.particlePool = [];
        this.arcPool = [];
        this.flowPaths = [];
        this.pulsePhases = [];
    }
    
  }
};
